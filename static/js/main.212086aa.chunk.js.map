{"version":3,"sources":["utils/history.js","containers/NccuCourse/constants.js","containers/NccuCourse/reducer.js","config/index.js","utils/request.js","containers/NccuCourse/epics.js","containers/NccuCourse/actions.js","store/epics.js","store/index.js","store/configureStore.js","store/reducers.js","containers/NccuCourse/NavigationBar/Styled.js","containers/NccuCourse/NavigationBar/NccuBrand.js","containers/NccuCourse/NavigationBar/index.js","containers/NccuCourse/selectors.js","containers/NccuCourse/MainContent/Styled.js","containers/NccuCourse/MainContent/SemesterSelectPage/index.js","containers/NccuCourse/MainContent/CourseListPage/index.js","containers/NccuCourse/MainContent/Routes.js","containers/NccuCourse/MainContent/index.js","containers/NccuCourse/Styled.js","containers/NccuCourse/index.js","App.js","serviceWorker.js","index.js"],"names":["history","createHistory","basename","process","INIT","concat","FETCH_SEMESTER_LIST","SET_SEMESTER_LIST","FETCH_COURSES_LIST","SET_COURSES_LIST_MAP","initialState","fromJS","semesterList","coursesListMap","nccuCourseReducer","state","arguments","length","undefined","action","type","set","payload","_action$payload","semester","coursesList","updateIn","COURSE_DATA_DOMAIN","APP_API_STATUS","JSON_HEADER","Headers","Content-Type","ActionException","this","name","actionAppStatus","handleRequestError","err","navigator","onLine","fetchErrorEpic","Observable","of","request","method","url","_action$download","download","from","fetch","then","response","status","localStorage","clear","sessionStorage","catch","mergeMap","res","blob","json","map","code","epics","action$","store","ofType","switchMap","empty","flatMap","setSemesterList","setCoursesListMap","store_epics","Object","toConsumableArray","nccuCourseEpics","epic$","BehaviorSubject","combineEpics","apply","initialEpics","epicMiddleware","createEpicMiddleware","middlewares","enhancers","applyMiddleware","composeEnhancers","compose","createStore","combineReducers","nccuCourse","run","deps","epic","source$","setTimeout","configureStore","mixinWidthStyle","StyledNavigationBar","styled","div","_templateObject","StyledNccuBrand","_templateObject2","NccuBrand","react_default","a","createElement","className","NavigationBar","NavigationBar_NccuBrand","get","selectSemesterList","createSelector","nccuCourseState","StyledMainContent","Styled_templateObject","StyledSemesterSelectPage","SemesterSelectPage_templateObject","SemesterSelectPage","handleOnSemesterSelect","event","target","getAttribute","console","log","push","_this2","props","item","key","data-semester","onClick","React","Component","mapStateToProps","createStructuredSelector","connect","dispatch","CourseListPage","_this$props","match","handlefetchCoursesList","params","_this$props2","course","defaultProps","Map","fetchCoursesList","routePathConfig","Routes","Router","Switch","Route","exact","path","component","MainContent","location","StyledNccuCourse","NccuCourse_Styled_templateObject","NccuCourse","handlefetchSemesterList","NccuCourse_NavigationBar","NccuCourse_MainContent","App","containers_NccuCourse","Boolean","window","hostname","ReactDOM","render","es","BrowserRouter","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"0OAMeA,QAJCC,GACZ,CAAEC,SAAUC,wDCFHC,EAAI,GAAAC,OADU,cACV,SACJC,EAAmB,GAAAD,OAFL,cAEK,wBACnBE,EAAiB,GAAAF,OAHH,cAGG,sBACjBG,EAAkB,GAAAH,OAJJ,cAII,uBAClBI,EAAoB,GAAAJ,OALN,cAKM,yBCI3BK,EAAeC,iBAAO,CACxBC,aAAc,GACdC,eAAgB,KA6BLC,MArBf,WAAyD,IAA9BC,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBN,EAAcS,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrD,OAAQC,EAAOC,MACX,KAAKb,EACD,OAAOQ,EACFM,IAAI,eAAgBV,iBAAOQ,EAAOG,QAAQV,eAEnD,KAAKH,EAAsB,IAAAc,EAInBJ,EAAOG,QAFPE,EAFmBD,EAEnBC,SACAC,EAHmBF,EAGnBE,YAEJ,OAAOV,EACFW,SAAS,CAAC,kBAAmB,SAACb,GAAD,OAC1BA,EAAeQ,IAAIG,EAAUb,iBAAOc,MAEhD,QACI,OAAOV,2CC3BNY,EAAmB,+ECNnBC,EAAiB,iBAGxBC,EAAc,IAAIC,QAAQ,CAC5BC,eAAgB,qBAGb,SAASC,EAAgBb,GAC5Bc,KAAKd,OAASA,EACdc,KAAKC,KAAO,kBAGhB,IAAMC,EAAkB,SAACb,GAAD,MAAc,CAClCF,KAAMQ,EACNN,YASJ,IAAMc,EAAqB,SAACC,GACxB,GAAIA,aAAeL,EACf,MAAMK,EAEV,MAAIC,UAAUC,OACJ,IAAIP,EAAgBG,EAAgB,MAEpC,IAAIH,EAAgBG,EAAgB,OAIrCK,EAAiB,SAACH,GAAD,OAASI,aAAWC,GAAGL,EAAIlB,SAE5CwB,EAAU,SAACxB,GAAW,IAE3ByB,EAKAzB,EALAyB,OACAC,EAIA1B,EAJA0B,IAH2BC,EAO3B3B,EADA4B,gBAN2B,IAAAD,KAQ/B,OAAOL,aAAWO,KACdC,MAAMJ,EAAK,CAAED,SAAQf,gBAAeqB,KAAK,SAACC,GACtC,GAAwB,MAApBA,EAASC,YAEN,IAAwB,MAApBD,EAASC,OAChB,MAAM,IAAIpB,EAAgB,CACtBZ,MAhChBiC,aAAaC,QACbC,eAAeD,QACR1B,GA+BSN,QAAS,MAEV,GAAI6B,EAASC,QAAU,IAC1B,MAAM,IAAIpB,EAAgBG,EAAgBgB,EAASC,SAGvD,OAAOD,KAGVK,MAAMpB,GACNqB,SAAS,SAACC,GACP,OAAIX,EACON,aAAWO,KAAKU,EAAIC,QAExBlB,aAAWO,KAAKU,EAAIE,UAE9BC,IAAI,SAACH,GACF,GAAIX,EACA,OAAOW,EAEX,GAAIA,EAAII,KACJ,MAAM,IAAI9B,EAAgB,CACtBZ,KAxEU,iBAyEVE,QAASoC,IAGjB,OAAOA,KCzBJK,EAAA,CAvCC,SAACC,EAASC,GAAV,OACZD,EAAQE,OAAO9D,GAAM+D,UAAU,WAC3B,OAAO1B,aAAW2B,WAGI,SAACJ,GAAD,OAC1BA,EAAQE,OAAO5D,GACV6D,UAAU,WACP,OAAOxB,EAAQ,CACXC,OAAQ,MACRC,IAAG,GAAAxC,OAAKsB,EAAL,iBAEF0C,QAAQ,SAACzD,GACN,OAAO6B,aAAWC,GCjBP,SAAC9B,GAAD,MAAmB,CAC9CQ,KAAMb,EACNe,QAAS,CACLV,iBDciC0D,CAAgB1D,MAExC4C,MAAMhB,MAIM,SAACwB,GAAD,OACzBA,EAAQE,OAAO1D,GACV2D,UAAU,SAAChD,GAAW,IAEfK,EACAL,EAAOG,QADPE,SAEJ,OAAOmB,EAAQ,CACXC,OAAQ,MACRC,IAAG,GAAAxC,OAAKsB,EAAL,KAAAtB,OAA2BmB,EAA3B,mBAEF6C,QAAQ,SAAC5C,GACN,OAAOgB,aAAWC,GCpBL,SAAClB,EAAUC,GAAX,MAA4B,CACzDL,KAAMX,EACNa,QAAS,CACLE,WACAC,gBDgBiC8C,CACjB/C,EACAC,MAGP+B,MAAMhB,OEhDRgC,EAAAC,OAAAC,EAAA,GAAIC,GCCnB,IAEeV,ECQA,WAAoD,IAA5BvD,EAA4BM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAb,GAE5C4D,GAFyD5D,UAAAC,OAAA,GAAAD,UAAA,GAEjD,IAAI6D,kBAAgBC,IAAYC,WAAZ,EAAAN,OAAAC,EAAA,EAAAD,CAAgBO,MAU5CC,EAAiBC,cAKjBC,EAAc,CAChBF,GAGEG,EAAY,CAACC,IAAeN,WAAf,EAAmBI,IAIhCG,EASIC,IAEJtB,EAAQuB,YC1CPC,0BAAgB,CACnBC,WAAY5E,ID2CZH,iBAAOD,GACP4E,EAAgBP,WAAhB,EAAoBK,IAKxB,OAFAH,EAAeU,IAvCE,SAAC3B,EAASC,EAAO2B,GAAjB,OACbhB,EAAMnB,SAAS,SAAAoC,GAAI,OACfA,EAAK7B,EAASC,EAAO2B,GAAMpC,MAAM,SAACnB,EAAKyD,GAInC,OAHAC,WAAW,WACP,MAAM1D,GACP,GACIyD,QAmCZ7B,EDtDG+B,CAAe,GAAIhG,ovBGI1B,IAAMiG,EAAkB,iCAAA5F,OVAN,IUAM,gDAAAA,OVAN,IUAM,sDAAAA,OVEJ,GUFI,iBAQlB6F,EAAsBC,IAAOC,IAAVC,IAKtBJ,IVZ2B,OUkBxBK,EAAkBH,IAAOC,IAAVG,KChBbC,EAPG,kBACdC,EAAAC,EAAAC,cAACL,EAAD,KACIG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,QACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAhB,YCMOC,EARO,kBAClBJ,EAAAC,EAAAC,cAACT,EAAD,KACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAACG,EAAD,SCLNpB,EAAa,SAAA3E,GAAK,OAAIA,EAAMgG,IAAI,eAEhCC,EAAqB,kBACzBC,YAAevB,EAAY,SAAAwB,GAAe,OACxCA,EAAgBH,IAAI,8PCAjB,IAAMI,GAAoBhB,IAAOC,IAAVgB,KdEO,GcI3BnB,8XCLV,IAAMoB,GAA2BlB,IAAOC,IAAVkB,MAaxBC,8MACFC,uBAAyB,SAACC,GACtB,IAAMjG,EAAWiG,EAAMC,OAAOC,aAAa,iBAC3CC,QAAQC,IAAIrG,GACZxB,EAAQ8H,KAAKtG,4EAER,IAAAuG,EAAA9F,KAEDrB,EACAqB,KAAK+F,MADLpH,aAEJ,OACI6F,EAAAC,EAAAC,cAACU,GAAD,KAEQzG,EAAaiD,IAAI,SAACoE,GAAD,OACbxB,EAAAC,EAAAC,cAAA,OACIuB,IAAKD,EACLE,gBAAeF,EAAKlB,IAAI,YACxBH,UAAU,0BACVwB,QAASL,EAAKP,wBAEbS,EAAKlB,IAAI,uBApBLsB,IAAMC,WA6BjCC,GAAkBC,YAAyB,CAC7C5H,aAAcoG,MAOHyB,eAAQF,GAJI,SAACG,GAAD,MAAe,IAI3BD,CAA6ClB,IC5CtDoB,+LAWkB,IAAAC,EAKZ3G,KAAK+F,MAHLnH,EAFY+H,EAEZ/H,eACAgI,EAHYD,EAGZC,MACAC,EAJYF,EAIZE,uBAEEtH,EAAWqH,EAAME,OAAOvH,SACzBX,EAAekG,IAAIvF,IACpBsH,EAAuBtH,oCAGtB,IAAAwH,EAID/G,KAAK+F,MAFLa,EAFCG,EAEDH,MACAhI,EAHCmI,EAGDnI,eAEEW,EAAWqH,EAAME,OAAOvH,SACxBC,EAAcZ,EAAekG,IAAIvF,GACvC,OACIiF,EAAAC,EAAAC,cAAA,WAEQlF,GACAA,EAAYoC,IAAI,SAACoF,GAAD,OACZxC,EAAAC,EAAAC,cAAA,OAAKuB,IAAKe,GACLA,EAAOlC,IAAI,mBAnCXsB,IAAMC,WAA7BK,GAMKO,aAAe,CAClBL,MAAO,GACPhI,eAAgBsI,gBAChBL,uBAAwB,cAmChC,IAAMP,GAAkBC,YAAyB,CAC7C5H,aAAcoG,IACdnG,eHjDFoG,YAAevB,EAAY,SAAAwB,GAAe,OACxCA,EAAgBH,IAAI,sBGuDT0B,eAAQF,GAJI,SAACG,GAAD,MAAe,CACtCI,uBAAwB,SAACtH,GAAD,OAAckH,EX7CV,SAAClH,GAAD,MAAe,CAC3CJ,KAAMZ,EACNc,QAAS,CACLE,aW0C2C4H,CAAiB5H,OAGrDiH,CAA6CE,IC5D/CU,GACe,IADfA,GAEW,aAGTC,GAAA,kBACX7C,EAAAC,EAAAC,cAAC4C,GAAA,EAAD,CAAQvJ,QAASA,GACbyG,EAAAC,EAAAC,cAAC6C,GAAA,EAAD,KACI/C,EAAAC,EAAAC,cAAC8C,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAMN,GAAwCO,UAAWrC,KACtEd,EAAAC,EAAAC,cAAC8C,GAAA,EAAD,CAAOE,KAAMN,GAAoCO,UAAWjB,QCRlEkB,oLACO,IAEDC,EACA7H,KAAK+F,MADL8B,SAGJ,OACIrD,EAAAC,EAAAC,cAACQ,GAAD,KACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAC2C,GAAD,CACIQ,SAAUA,aAVRzB,IAAMC,WAmB1BC,GAAkBC,YAAyB,CAC7C5H,aAAcoG,MAOHyB,eAAQF,GAJI,SAACG,GAAD,MAAe,IAI3BD,CAA6CoB,8HChCrD,IAAME,GAAmB5D,IAAOC,IAAV4D,MCSvBC,gMAKEC,EADIjI,KAAK+F,MADLkC,4DAKJ,OACIzD,EAAAC,EAAAC,cAACoD,GAAD,KACItD,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAACyD,GAAD,cAXS/B,IAAMC,WAiBzBC,GAAkBC,YAAyB,IAOlCC,eAAQF,GAJI,SAACG,GAAD,MAAe,CACtCwB,wBAAyB,kBAAMxB,EfzBK,CACpCtH,KAAMd,Oe2BKmI,CAA6CwB,ICrB7CI,oLARP,OACI5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC2D,GAAD,cAJEhC,aCQEiC,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAAS5B,MACvB,2DCRN6B,IAASC,OACPlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAU3G,MAAOA,GACfwC,EAAAC,EAAAC,cAACkE,EAAA,EAAD,KACEpE,EAAAC,EAAAC,cAACmE,GAAD,QAGJC,SAASC,eAAe,SDiHpB,kBAAmB1I,WACrBA,UAAU2I,cAAcC,MAAMhI,KAAK,SAAAiI,GACjCA,EAAaC","file":"static/js/main.212086aa.chunk.js","sourcesContent":["import createHistory from 'history/createBrowserHistory';\n\nconst history = createHistory(\n    { basename: process.env.PUBLIC_URL }\n);\n\nexport default history;\n","export const KEY_REDUCER = 'NCCU_COURSE';\nexport const INIT = `${KEY_REDUCER}/INIT`;\nexport const FETCH_SEMESTER_LIST = `${KEY_REDUCER}/FETCH_SEMESTER_LIST`;\nexport const SET_SEMESTER_LIST = `${KEY_REDUCER}/SET_SEMESTER_LIST`;\nexport const FETCH_COURSES_LIST = `${KEY_REDUCER}/FETCH_COURSES_LIST`;\nexport const SET_COURSES_LIST_MAP = `${KEY_REDUCER}/SET_COURSES_LIST_MAP`;\n\nexport const APP_WIDTH = 1000;\nexport const NAVIGATION_BAR_HEIGHT = 50;\nexport const APP_PADDING = 10;\n","import { fromJS } from 'immutable';\nimport {\n    SET_SEMESTER_LIST,\n    SET_COURSES_LIST_MAP,\n} from './constants';\n\n//  nccucourse-data/10701/courses.json\n//  nccucourse-data/10701/evaluation.json\n\nconst initialState = fromJS({\n    semesterList: [],\n    coursesListMap: {},\n});\n\n// coursesListMap: {\n//   10701: [{...}, {...}, ...],\n//   10702: [{...}, {...}, ...],\n// }\n\nfunction nccuCourseReducer(state = initialState, action) {\n    switch (action.type) {\n        case SET_SEMESTER_LIST: {\n            return state\n                .set('semesterList', fromJS(action.payload.semesterList));\n        }\n        case SET_COURSES_LIST_MAP: {\n            const {\n                semester,\n                coursesList,\n            } = action.payload;\n            return state\n                .updateIn(['coursesListMap'], (coursesListMap) =>\n                    coursesListMap.set(semester, fromJS(coursesList)));\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default nccuCourseReducer;\n","// progeneral777/nccu_course_data\n// https://github.com/progeneral777/nccu_course_data\n\n// progeneral777/nccu_course_data_test\n// https://github.com/progeneral777/nccu_course_data_test\n\n// export const COURSE_DATA_DOMAIN='https://raw.githubusercontent.com/TimingJL/nccucourse-data/master';\n// export const COURSE_DATA_DOMAIN='https://raw.githubusercontent.com/progeneral777/nccu_course_data/master';\nexport const COURSE_DATA_DOMAIN='https://raw.githubusercontent.com/progeneral777/nccu_course_data_test/master';\n","import { Observable } from \"rxjs/Rx\";\n\nexport const APP_API_STATUS = 'APP_API_STATUS';\nexport const APP_ERROR_CODE = 'APP_ERROR_CODE';\n\nconst JSON_HEADER = new Headers({\n    'Content-Type': 'application/json',\n});\n\nexport function ActionException(action) {\n    this.action = action;\n    this.name = 'ActionException';\n}\n\nconst actionAppStatus = (payload) => ({\n    type: APP_API_STATUS,\n    payload,\n});\n\nexport function authError() {\n    localStorage.clear();\n    sessionStorage.clear();\n    return APP_API_STATUS;\n}\n\nconst handleRequestError = (err) => {\n    if (err instanceof ActionException) {\n        throw err;\n    }\n    if (navigator.onLine) {\n        throw new ActionException(actionAppStatus(503));\n    } else {\n        throw new ActionException(actionAppStatus(420)); // net::ERR_INTERNET_DISCONNECTED\n    }\n};\n\nexport const fetchErrorEpic = (err) => Observable.of(err.action);\n\nexport const request = (action) => {\n    const {\n        method,\n        url,\n        // data,\n        // options,\n        download = false,\n    } = action;\n    return Observable.from(\n        fetch(url, { method, JSON_HEADER }).then((response) => {\n            if (response.status === 400) {\n                // show not found\n            } else if (response.status === 401) {\n                throw new ActionException({\n                    type: authError(),\n                    payload: 401,\n                });\n            } else if (response.status >= 500) {\n                throw new ActionException(actionAppStatus(response.status));\n            }\n\n            return response;\n        })\n    )\n        .catch(handleRequestError)\n        .mergeMap((res) => {\n            if (download) {\n                return Observable.from(res.blob());\n            }\n            return Observable.from(res.json());\n        })\n        .map((res) => {\n            if (download) {\n                return res;\n            }\n            if (res.code) {\n                throw new ActionException({\n                    type: APP_ERROR_CODE,\n                    payload: res,\n                });\n            }\n            return res;\n        });\n};\n","import { Observable } from 'rxjs/Rx';\nimport { COURSE_DATA_DOMAIN } from 'config';\nimport { request, fetchErrorEpic } from 'utils/request';\n\nimport {\n    INIT,\n    FETCH_SEMESTER_LIST,\n    FETCH_COURSES_LIST,\n} from './constants';\n\nimport {\n    setSemesterList,\n    setCoursesListMap,\n} from './actions';\n\nconst setInit = (action$, store) =>\n    action$.ofType(INIT).switchMap(() => {\n        return Observable.empty();\n    });\n\nconst fetchSemesterListEpic = (action$) => (\n    action$.ofType(FETCH_SEMESTER_LIST)\n        .switchMap(() => {\n            return request({\n                method: 'get',\n                url: `${COURSE_DATA_DOMAIN}/index.json`,\n            })\n                .flatMap((semesterList) => {\n                    return Observable.of(setSemesterList(semesterList));\n                })\n                .catch(fetchErrorEpic);\n        })\n);\n\nconst fetchCoursesListEpic = (action$) => (\n    action$.ofType(FETCH_COURSES_LIST)\n        .switchMap((action) => {\n            const {\n                semester,\n            } = action.payload;\n            return request({\n                method: 'get',\n                url: `${COURSE_DATA_DOMAIN}/${semester}/courses.json`,\n            })\n                .flatMap((coursesList) => {\n                    return Observable.of(setCoursesListMap(\n                        semester,\n                        coursesList,\n                    ));\n                })\n                .catch(fetchErrorEpic);\n        })\n);\n\nexport default [\n    setInit,\n    fetchSemesterListEpic,\n    fetchCoursesListEpic,\n];\n","import {\n    FETCH_SEMESTER_LIST,\n    SET_SEMESTER_LIST,\n    FETCH_COURSES_LIST,\n    SET_COURSES_LIST_MAP,\n} from './constants';\n\nexport const fetchSemesterList = () => ({\n    type: FETCH_SEMESTER_LIST,\n});\n\nexport const setSemesterList = (semesterList) => ({\n    type: SET_SEMESTER_LIST,\n    payload: {\n        semesterList,\n    },\n});\n\nexport const fetchCoursesList = (semester) => ({\n    type: FETCH_COURSES_LIST,\n    payload: {\n        semester,\n    }\n});\n\nexport const setCoursesListMap = (semester, coursesList) => ({\n    type: SET_COURSES_LIST_MAP,\n    payload: {\n        semester,\n        coursesList,\n    },\n});\n","import nccuCourseEpics from 'containers/NccuCourse/epics';\n\nexport default [...nccuCourseEpics];\n","import history from 'utils/history';\nimport configureStore from './configureStore';\n\nconst store = configureStore({}, history);\n\nexport default store;\n","import { fromJS } from 'immutable';\nimport {\n    createStore,\n    applyMiddleware,\n    compose\n} from 'redux';\nimport createReducer from 'store/reducers';\n\n// for epics\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { createEpicMiddleware, combineEpics } from 'redux-observable';\nimport initialEpics from './epics';\n\nexport default function configureStore(initialState = {}, history) {\n    // Create root epic that accepts async injection\n    const epic$ = new BehaviorSubject(combineEpics(...initialEpics));\n    const rootEpic = (action$, store, deps) =>\n        epic$.mergeMap(epic =>\n            epic(action$, store, deps).catch((err, source$) => {\n                setTimeout(() => {\n                    throw err;\n                }, 0);\n                return source$;\n            }),\n        );\n    const epicMiddleware = createEpicMiddleware();\n\n    // Create the store with two middlewares\n    // 1. sagaMiddleware: Makes redux-sagas work\n    // 2. routerMiddleware: Syncs the location/URL path to the state\n    const middlewares = [\n        epicMiddleware,\n    ];\n\n    const enhancers = [applyMiddleware(...middlewares)];\n\n    // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n    /* eslint-disable no-underscore-dangle */\n    const composeEnhancers =\n        process.env.NODE_ENV !== 'production' &&\n            typeof window === 'object' &&\n            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n            ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n                // TODO Try to remove when `react-router-redux` is out of beta, LOCATION_CHANGE should not be fired more than once after hot reloading\n                // Prevent recomputing reducers for `replaceReducer`\n                shouldHotReload: false,\n            })\n            : compose;\n\n    const store = createStore(\n        createReducer(),\n        fromJS(initialState),\n        composeEnhancers(...enhancers)\n    );\n\n    epicMiddleware.run(rootEpic);\n\n    return store;\n}\n","import { combineReducers } from 'redux-immutable';\nimport nccuCourseReducer from 'containers/NccuCourse/reducer';\n\n/**\n * Creates the main reducer with the asynchronously loaded ones\n */\nexport default function createReducer(injectedReducers) {\n    return combineReducers({\n        nccuCourse: nccuCourseReducer,\n    });\n};\n","import styled from 'styled-components';\nimport {\n    APP_WIDTH,\n    APP_PADDING,\n    NAVIGATION_BAR_HEIGHT,\n} from 'containers/NccuCourse/constants';\n\nexport const mixinWidthStyle = () => `\n    width: ${APP_WIDTH}px;\n    @media only screen and (max-width: ${APP_WIDTH}px) {\n        width: 100%;\n        padding: 0px ${APP_PADDING}px;\n    }\n`;\n\nexport const StyledNavigationBar = styled.div`\n    display: flex;\n    justify-content: center;\n    background: #ffffff0a; /* navigation bar background color */\n    .navigation-bar__main-content {\n        ${mixinWidthStyle()}\n        height: ${NAVIGATION_BAR_HEIGHT}px;\n        line-height: ${NAVIGATION_BAR_HEIGHT}px;\n    }\n`;\n\nexport const StyledNccuBrand = styled.div`\n    .nccu-brand__nccu {\n        color: white;\n        font-size: 32px;\n        font-weight: 900;\n        font-family: 'Archivo Black', sans-serif;\n    }\n    .nccu-brand__course {\n        font-family: 'Francois One', sans-serif;\n        color: #5383d3;\n        font-size: 25px;\n    }\n`;\n","import React from 'react';\nimport { StyledNccuBrand } from './Styled';\n\nconst NccuBrand = () => (\n    <StyledNccuBrand>\n        <span className=\"nccu-brand__nccu\">NCCU</span>\n        <span className=\"nccu-brand__course\">course</span>\n    </StyledNccuBrand>\n);\n\nexport default NccuBrand;\n","import React from 'react';\nimport NccuBrand from './NccuBrand';\nimport { StyledNavigationBar } from './Styled';\n\nconst NavigationBar = () => (\n    <StyledNavigationBar>\n        <div className=\"navigation-bar__main-content\">\n            <NccuBrand />\n        </div>\n    </StyledNavigationBar>\n);\n\nexport default NavigationBar;\n","import { createSelector } from 'reselect';\n\nconst nccuCourse = state => state.get('nccuCourse');\n\nconst selectSemesterList = () =>\n  createSelector(nccuCourse, nccuCourseState =>\n    nccuCourseState.get('semesterList'),\n  );\n\nconst selectCoursesListMap = () =>\n  createSelector(nccuCourse, nccuCourseState =>\n    nccuCourseState.get('coursesListMap'),\n  );\n\nexport {\n  selectSemesterList,\n  selectCoursesListMap,\n};\n","import styled from 'styled-components';\nimport {\n    NAVIGATION_BAR_HEIGHT,\n} from 'containers/NccuCourse/constants';\nimport { mixinWidthStyle } from 'containers/NccuCourse/NavigationBar/Styled'\n\nexport const StyledMainContent = styled.div`\n    display: flex;\n    justify-content: center;\n    height: calc(100vh - ${NAVIGATION_BAR_HEIGHT}px);\n    overflow-y: auto;\n    .main-content__main-content {\n        ${mixinWidthStyle()}\n    }\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport history from 'utils/history';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport { selectSemesterList } from 'containers/NccuCourse/selectors';\n\nconst StyledSemesterSelectPage = styled.div`\n    display: grid;\n    .semester-select__option {\n        grid-template-columns: repeat(3, 1fr);\n        font-size: 2em;\n        padding: 5px 20px;\n        margin: 20px 0px;\n        text-align: center;\n        background: #ffffff45;\n        cursor: pointer;\n    }\n`;\n\nclass SemesterSelectPage extends React.Component {\n    handleOnSemesterSelect = (event) => {\n        const semester = event.target.getAttribute('data-semester');\n        console.log(semester);\n        history.push(semester);\n    }\n    render() {\n        const {\n            semesterList,\n        } = this.props;\n        return (\n            <StyledSemesterSelectPage>\n                {\n                    semesterList.map((item) => (\n                        <div\n                            key={item}\n                            data-semester={item.get('semester')}\n                            className=\"semester-select__option\"\n                            onClick={this.handleOnSemesterSelect}\n                        >\n                            {item.get('semester')}\n                        </div>\n                    ))\n                }\n            </StyledSemesterSelectPage>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    semesterList: selectSemesterList(),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SemesterSelectPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Map } from 'immutable';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport {\n    fetchCoursesList,\n} from 'containers/NccuCourse/actions'\nimport {\n    selectSemesterList,\n    selectCoursesListMap,\n} from 'containers/NccuCourse/selectors';\n\nclass CourseListPage extends React.Component {\n    static propTypes = {\n        match: PropTypes.object,\n        coursesListMap: PropTypes.instanceOf(Map),\n        handlefetchCoursesList: PropTypes.func,\n    }\n    static defaultProps = {\n        match: {},\n        coursesListMap: Map(),\n        handlefetchCoursesList: () => { },\n    }\n    componentDidMount() {\n        const {\n            coursesListMap,\n            match,\n            handlefetchCoursesList,\n        } = this.props;\n        const semester = match.params.semester;\n        if (!coursesListMap.get(semester)) {\n            handlefetchCoursesList(semester);\n        }\n    }\n    render() {\n        const {\n            match,\n            coursesListMap,\n        } = this.props;\n        const semester = match.params.semester;\n        const coursesList = coursesListMap.get(semester);\n        return (\n            <div>\n                {\n                    coursesList &&\n                    coursesList.map((course) => (\n                        <div key={course}>\n                            {course.get('name')}\n                        </div>\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    semesterList: selectSemesterList(),\n    coursesListMap: selectCoursesListMap(),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    handlefetchCoursesList: (semester) => dispatch(fetchCoursesList(semester)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CourseListPage);\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport SemesterSelectPage from './SemesterSelectPage';\nimport CourseListPage from './CourseListPage';\nimport history from 'utils/history';\n\nexport const routePathConfig = {\n    semesterSelectPagePath: '/',\n    courseListPagePath: '/:semester',\n};\n\nexport default () => (\n    <Router history={history}>\n        <Switch>\n            <Route exact path={routePathConfig.semesterSelectPagePath} component={SemesterSelectPage} />\n            <Route path={routePathConfig.courseListPagePath} component={CourseListPage} />\n        </Switch>\n    </Router>\n);\n","import React from 'react';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport { selectSemesterList } from 'containers/NccuCourse/selectors';\nimport { StyledMainContent } from './Styled';\nimport Routes from './Routes';\n\nclass MainContent extends React.Component {\n    render() {\n        const {\n            location,\n        } = this.props;\n\n        return (\n            <StyledMainContent>\n                <div className=\"main-content__main-content\">\n                    <Routes\n                        location={location}\n                    />\n                </div>\n            </StyledMainContent>\n        );\n    }\n}\n\n\nconst mapStateToProps = createStructuredSelector({\n    semesterList: selectSemesterList(),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainContent);\n","import styled from 'styled-components';\n\nexport const StyledNccuCourse = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n","import React from 'react';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\n\nimport NavigationBar from 'containers/NccuCourse/NavigationBar';\nimport MainContent from 'containers/NccuCourse/MainContent';\nimport {\n    fetchSemesterList,\n} from './actions';\nimport { StyledNccuCourse } from './Styled';\n\nclass NccuCourse extends React.Component {\n    componentDidMount() {\n        const {\n            handlefetchSemesterList,\n        } = this.props;\n        handlefetchSemesterList();\n    }\n    render() {\n        return (\n            <StyledNccuCourse>\n                <NavigationBar />\n                <MainContent />\n            </StyledNccuCourse>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    handlefetchSemesterList: () => dispatch(fetchSemesterList()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NccuCourse);\n","import React, { Component } from 'react';\nimport './App.css';\nimport NccuCourse from 'containers/NccuCourse';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <NccuCourse />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'store';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}